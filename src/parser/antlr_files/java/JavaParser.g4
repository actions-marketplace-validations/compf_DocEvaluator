parser grammar JavaParser;
options { tokenVocab=JavaLexer; }
javaFile:commentComponentPair*;
allRelevantComponents:importStatement* commentComponentPair*;
classDec: modifierer*  CLASS id generics? extendsStatement? implementStatement* classBlock;
classBlock: '{' commentComponentPair* '}';
blockStart: '{';
blockEnd: '}';
extendsStatement: (EXTENDS qualifiedName);
implementStatement: (IMPLEMENTS qualifiedName);
importStatement: IMPORT qualifiedName ';';
interfaceDec: modifierer* INTERFACE id (IMPLEMENTS qualifiedName)* blockStart;
commentComponentPair: COMMENT? component;
component: (classDec | interfaceDec | methodDecl|fieldDec);
modifierer: PUBLIC|STATIC|PROTECTED|PRIVATE|FINAL|(AT IDENTIFIER);
generics: '<' IDENTIFIER '>';
methodDecl: modifierer* dataType id '(' params? ')' block;
fieldDec: modifierer* dataType id ';';
block: '{' .*? (block .*?)? '}';
dataType: (VOID | INT | LONG |DOUBLE | FLOAT |SHORT | qualifiedName) ('['  ']')?;
params: param (',' param)* param?;
param: dataType IDENTIFIER;
comment: COMMENT;
notInteresting: ~'}'*;
id: IDENTIFIER;
qualifiedName: id ('.' id)*;